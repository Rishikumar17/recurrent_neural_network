# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GnxDCwmqeYj2lGjrpv_d26G99QaqmSGK
"""

# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

# ls -l "/content/drive/My Drive"
#Importing Libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM

#Reading the dataset
dataset_train = pd.read_csv("/content/drive/My Drive/Google_Stock_Price_Train.csv")

#Getting the second column since this is fed into the recurrent neural network
training_set = dataset_train.iloc[:,1:2].values

#Appliying normalisation to the dataset since it falls in the range from 0,1
sc = MinMaxScaler()
training_set = sc.fit_transform(training_set)

#Creating the data structure of 60 timestamps and 1 output
#X_train will consists of last 60 columns data in memory and y_train consists of 61th column and hence the loop will start from 60
X_train = []
y_train = []
for i in range(60, len(training_set)):
  X_train.append(training_set[i-60:i,0])
  y_train.append(training_set[i,0])
X_train, y_train = np.array(X_train), np.array(y_train)

#Reshaping into 3D target form
X_train = np.reshape(X_train,(X_train.shape[0], X_train.shape[1],1))

#Initializing the neural network
regressor = Sequential()

#Adding the first LSTM layer with some dropout regularization parameters
regressor.add(LSTM(units=50,return_sequences=True, input_shape=(X_train.shape[1],1)))
regressor.add(Dropout(0.2))
#Adding the second LSTM layer with some dropout regularization parameters
regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))
#Adding the third LSTM layer with some dropout regularization parameters
regressor.add(LSTM(units=50,return_sequences=True))
regressor.add(Dropout(0.2))
#Adding the fourth LSTM layer with some dropout regularization parameters
regressor.add(LSTM(units=50))
regressor.add(Dropout(0.2))

#Adding the output layer
regressor.add(Dense(units=1))

#Compiling the ANN
regressor.compile(optimizer='adam',loss='mean_squared_error')

#Fitting the CNN
regressor.fit(X_train,y_train,batch_size=32,epochs=100)

#Getting the real stock prices for 2017
dataset_test = pd.read_csv("/content/drive/My Drive/Google_Stock_Price_Test.csv")
real_stocks = dataset_test.iloc[:,1:2].values

#Getting thr predicted stock prices of 2018
dataset_total = pd.concat((dataset_train["Open"],dataset_test["Open"]),axis=0)
inputs = dataset_total.iloc[len(dataset_total)-len(dataset_test)-60:]
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)

X_test = []
for i in range(60, len(inputs)):
  X_test.append(inputs[i-60:i,0])
X_test = np.array(X_test)

#Reshaping into 3D target form
X_test = np.reshape(X_test,(X_test.shape[0], X_test.shape[1],1))

predicted_stock_price = regressor.predict(X_test)

predicted_stock_price = sc.inverse_transform(predicted_stock_price)

#Visualizing the results
plt.plot(real_stocks, color='red',label='Real Stock Prices')
plt.plot(predicted_stock_price, color='blue',label='Predicted Stock Prices')
plt.legend()
plt.xlabel("Time")
plt.ylabel("Price of Stocks")
plt.show()

